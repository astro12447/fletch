{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,gCAAgC;AAChC,4DAA4D,gBAAgB;AAC5E;AACA,yCAAyC;AACzC,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,wDAAwD;AACxD;AACA,0CAA0C;AAC1C,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;UErJA;UACA;UACA;UACA;UACA","sources":["webpack://scanner-post/./src/index.ts","webpack://scanner-post/webpack/before-startup","webpack://scanner-post/webpack/startup","webpack://scanner-post/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HandleCellClick = void 0;\n//Определяем класс файла.\nclass File {\n    //Конструктор класса File\n    constructor(typefile, filename, sizeInMB, siseInbytes, folder) {\n        //Инициализируйте свойства значениями, переданными конструктору.\n        this.typefile = typefile;\n        this.filename = filename;\n        this.sizeInMB = sizeInMB;\n        this.sizeInBytes = siseInbytes;\n        this.folder = folder;\n    }\n}\nclass params {\n    constructor(root, sort) {\n        this.root = root;\n        this.sort = sort;\n    }\n}\nfunction drawTable(items) {\n    const filesTableBody = document.getElementById('filesTableBody');\n    // Получение элементов, в которых мы хотим отобразить данные.\n    items.forEach(file => {\n        const row = document.createElement('tr');\n        // Создание ячейки для каждого свойства пользователя.\n        const nameCell = document.createElement('td');\n        nameCell.textContent = file.filename;\n        const typefileCell = document.createElement('td');\n        typefileCell.textContent = file.typefile;\n        const sizeInBMCell = document.createElement('td');\n        sizeInBMCell.textContent = file.sizeInMB + \" MB\";\n        const foldeCell = document.createElement('td');\n        foldeCell.textContent = file.folder;\n        // Добавление ячейки в строку\n        row.appendChild(typefileCell);\n        row.appendChild(nameCell);\n        row.appendChild(sizeInBMCell);\n        row.appendChild(foldeCell);\n        // Добавление строки в тело таблицы\n        if (filesTableBody) {\n            filesTableBody.appendChild(row);\n        }\n    });\n}\n// Определяем асинхронную функцию fetchData, которая принимает URL-адрес как строку и возвращает Promise<void>.\nfunction fetchData(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const response = yield fetch(url); // Используем API-интерфейс выборки, чтобы сделать запрос GET по предоставленному URL-адресу.\n            if (!response.ok) { // Если ответ не ок (статус не в диапазоне 200-299), выдать ошибку\n                throw new Error(`HTTP ошибка! положение : ${response.status}`);\n            }\n            console.log(\"Response OK!\"); // Зарегистрируем сообщение об успехе, если ответ в порядке.\n            const files = yield response.json(); // Разбераем тело ответа в массиве тип File как JSON и дождитесь его завершения.\n            console.log('Files:', files.Files);\n            console.log('Elapsedtime:', files.elapsedtime);\n            drawTable(files.Files);\n            Drawelapsedtime(files.elapsedtime);\n            // Вызов функции для отображения элементов в таблице\n        }\n        catch (error) {\n            console.error('Ошибка при выполнении запроса:', error);\n        }\n    });\n}\n// insertar texto en el botton con id:elapsedtime.\nfunction Drawelapsedtime(param) {\n    const elapsedtimeId = document.getElementById('btn-elapsedtime');\n    if (elapsedtimeId) {\n        elapsedtimeId.textContent = 'Elased:' + ' ' + param;\n    }\n}\n//Функция для проверки «params» параметров «root» и «sort».\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const url = new URL(window.location.href); // files;\n    const param = new params(url.searchParams.get(\"root\"), url.searchParams.get(\"sort\"));\n    if (param.root != \"\") {\n        url.pathname += \"./files\";\n        let newULR = url.toString();\n        fetchData(newULR);\n    }\n});\nconst backbuttom = document.getElementById('backButton');\nif (backbuttom) {\n    backbuttom.addEventListener(\"click\", () => {\n        const url = new URL(window.location.href);\n        let newRoot = url.searchParams.get(\"root\");\n        let parts = newRoot === null || newRoot === void 0 ? void 0 : newRoot.split('/');\n        parts === null || parts === void 0 ? void 0 : parts.pop();\n        newRoot = (parts === null || parts === void 0 ? void 0 : parts.join('/')) || null;\n        if (newRoot) {\n            updateRootParameter(newRoot);\n            window.location.reload();\n        }\n    });\n}\nfunction convertBytesToMB(bytes) {\n    const megabytes = bytes / (1024 * 1024);\n    return parseFloat(megabytes.toFixed(4));\n}\n// Функция для обновления параметра запроса «root» в URL-адресе.\nfunction updateRootParameter(newRootValue) {\n    let url = new URL(window.location.href); // Создаем новый объект URL-адреса на основе текущего URL-адреса.\n    // Create a new URLSearchParams object from the current URL's search parameters\n    let searchParams = new URLSearchParams(url.search); // Создаём новый объект URLSearchParams на основе параметров поиска текущего URL\n    searchParams.set('root', newRootValue);\n    url.search = searchParams.toString(); //Обновяем свойство поиска объекта URL новыми параметрами поиска.\n    history.pushState(null, '', url.toString()); //Обновяем историю браузера и URL-адрес без перезагрузки страницы.\n}\n// Функция для обработки щелчка по ячейке\nfunction HandleCellClick(event) {\n    // Check if the clicked element is a TD element\n    if (event.target.tagName === 'TD') {\n        // Get the text content of the clicked cell\n        const cellText = event.target.textContent;\n        UpadateRoot(cellText);\n    }\n}\nexports.HandleCellClick = HandleCellClick;\n//проверяет, не является ли имя_таблицы нулевым. Если tableName не равно нулю, к \n//элементу tableName добавляется прослушиватель событий, который прослушивает события щелчка.\nconst tableName = document.getElementById('filesTable');\nif (tableName) {\n    tableName.addEventListener('click', HandleCellClick);\n}\n//Функция SetwindowsParams принимает строковый параметр Celldt, который может \n// быть строковым или нулевым. Затем он создает новый объект URL из текущего местоположения окна.\nfunction UpadateRoot(Celldt) {\n    const url = new URL(window.location.href);\n    try {\n        if (Celldt) {\n            url.searchParams.set('root', Celldt);\n            window.location.href = url.toString();\n        }\n    }\n    catch (error) {\n        console.error(\"Cell data  don't exist!\");\n    }\n}\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/index.ts\"](0, __webpack_exports__);\n",""],"names":[],"sourceRoot":""}